// {
//   status: 'complete',
//     orderRef: '6b0036ae-5a04-4304-be33-c732635300f9',
//   completionData: {
//   cert: {
//     notAfter: '1640991599000',
//       notBefore: '1546297200000'
//   },
//   user: {
//     name: 'John Filip Sjulander',
//       surname: 'Sjulander',
//       givenName: 'John Filip',
//       personalNumber: '198711131436'
//   },
//   device: {
//     ipAddress: '92.34.157.173'
//   },
//   signature: 'PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PFNpZ25hdHVyZSB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PFNpZ25lZEluZm8geG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMS9SRUMteG1sLWMxNG4tMjAwMTAzMTUiPjwvQ2Fub25pY2FsaXphdGlvbk1ldGhvZD48U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxkc2lnLW1vcmUjcnNhLXNoYTI1NiI+PC9TaWduYXR1cmVNZXRob2Q+PFJlZmVyZW5jZSBUeXBlPSJodHRwOi8vd3d3LmJhbmtpZC5jb20vc2lnbmF0dXJlL3YxLjAuMC90eXBlcyIgVVJJPSIjYmlkU2lnbmVkRGF0YSI+PFRyYW5zZm9ybXM+PFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDEvUkVDLXhtbC1jMTRuLTIwMDEwMzE1Ij48L1RyYW5zZm9ybT48L1RyYW5zZm9ybXM+PERpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiI+PC9EaWdlc3RNZXRob2Q+PERpZ2VzdFZhbHVlPm9ld1hzZlBYT2VRWnNDcWg1SmVLOFdVaUJNZ2JTTys3Q21hcGxBeE0xQUE9PC9EaWdlc3RWYWx1ZT48L1JlZmVyZW5jZT48UmVmZXJlbmNlIFVSST0iI2JpZEtleUluZm8iPjxUcmFuc2Zvcm1zPjxUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAxL1JFQy14bWwtYzE0bi0yMDAxMDMxNSI+PC9UcmFuc2Zvcm0+PC9UcmFuc2Zvcm1zPjxEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiPjwvRGlnZXN0TWV0aG9kPjxEaWdlc3RWYWx1ZT53Y0NNQlBoVEIvaEhnamljQWQzNWVWOUd1ZHUwOTJUNFBFOEpWSlpydnJjPTwvRGlnZXN0VmFsdWU+PC9SZWZlcmVuY2U+PC9TaWduZWRJbmZvPjxTaWduYXR1cmVWYWx1ZT4xb200aDVVV0VPNUQzcU1seWNvSUR6NFdaN1RvV0k5TStlZnFyVDU1SGlGcy9kUkNod3pseGlHcklGTExRUUhuQkJjQitkQmY1eEpxcVdValZHbzVnWmFZNFg3Q0N5OUIwUCsxckpWWWt4aFhYTlNkWjdvMjBxSG4yKzg2a1JFUVpTbFVzZmxkeWZzaldvWVlUSVROaU9FR0ZNbU56OWZ2dmpORkl2QlptN1FLWXNacUVSQ0lneDBFa25GYWcvcmtQaS9WZ1laZnlHN3hQbFB0Z1FZZkwrOEdLUk5UbTBwWXUxZ2ZRSU1LdzFRdW1IUEJneEk1bHozcnl4bnNZVGV3aml5QzNMandHMnVsTWVESWlsWlRwSjZEek5yVjhCTWQ5VVFMRk50dlhGWnZWQ2VKd3ZuWTNYREJmS3lQU0pxc3dFejJ1Mi9hc2RVMVhkeDNvNXBSRlE9PTwvU2lnbmF0dXJlVmFsdWU+PEtleUluZm8geG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiIElkPSJiaWRLZXlJbmZvIj48WDUwOURhdGE+PFg1MDlDZXJ0aWZpY2F0ZT5NSUlGbmpDQ0E0YWdBd0lCQWdJSUxYcVJPd2d0RmVZd0RRWUpLb1pJaHZjTkFRRUxCUUF3Z1pVeEN6QUpCZ05WQkFZVEFsTkZNVE13TVFZRFZRUUtEQ3BNdzZSdWMyYkR0bkp6dzZScmNtbHVaMkZ5SUVKaGJtc2dRV3QwYVdWaWIyeGhaeUFvY0hWaWJDa3hFekFSQmdOVkJBVVRDalV4TmpRd01UazROemd4UERBNkJnTlZCQU1NTTB6RHBHNXpac08yY25QRHBHdHlhVzVuWVhJZ1FtRnVheUJEZFhOMGIyMWxjaUJEUVRNZ2RqRWdabTl5SUVKaGJtdEpSREFlRncweE9ERXlNekV5TXpBd01EQmFGdzB5TVRFeU16RXlNalU1TlRsYU1JSGZNUXN3Q1FZRFZRUUdFd0pUUlRFek1ERUdBMVVFQ2d3cVRNT2tibk5tdzdaeWM4T2thM0pwYm1kaGNpQkNZVzVySUVGcmRHbGxZbTlzWVdjZ0tIQjFZbXdwTVJJd0VBWURWUVFFREFsVGFuVnNZVzVrWlhJeEV6QVJCZ05WQkNvTUNrcHZhRzRnUm1sc2FYQXhGVEFUQmdOVkJBVVREREU1T0RjeE1URXpNVFF6TmpFOE1Eb0dBMVVFS1F3ektERTVNREV3TVNBeE9TNHpNeWtnU205b2JpQkdhV3hwY0NCVGFuVnNZVzVrWlhJZ0xTQk5iMkpwYkhRZ1FtRnVhMGxFTVIwd0d3WURWUVFEREJSS2IyaHVJRVpwYkdsd0lGTnFkV3hoYm1SbGNqQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5jWXNpeXhxWDlZeHNsbURpOG80aW1lbUV1djQ3Zm9LSmpRTDNZdXpYdGkrL0h5TWI1SDBMa20vVUNGNFI0dko1MnV0QkRndlZmNFFzdkRrdUlNZUdxdDJOM2dtdHlZMDdnV1VQWXFhYlRScS9GRUdYcm9DTGZMbnkrQVBBOGNUUll3QzAvaFNoTVE5WjZ3aUpkMEUyWE96ZldTSEo3YUpOSVZ4U3N1aTRMaFJqUHovSGI4aHp5ZHJJY2hyUTE2aUtXQnhvVWpFYkY1dTRkL1ZMUUNqV2U2L1BhWHR3TE80VUJCMDgxV3pveFJaWExSZzVsSkM1eHlON1AxWjFoTUdrT29iQzAzN05NbUVDTVhWdTJjbVRGWU9ZelNSMVFhZHl1U24wVk9oc0QzRkJ5OHNxVE03OTcra3JVVTJmaE9QWUorbUhta1hMSU5CYXJCMEEwOFdFc0NBd0VBQWFPQnBUQ0JvakE3QmdnckJnRUZCUWNCQVFRdk1DMHdLd1lJS3dZQkJRVUhNQUdHSDJoMGRIQTZMeTl2WTNOd0xuSmxkbTlqWVhScGIyNXpkR0YwZFhNdWMyVXdFd1lEVlIwZ0JBd3dDakFJQmdZcWhYQk9BUVV3RGdZRFZSMFBBUUgvQkFRREFnZUFNQjhHQTFVZEl3UVlNQmFBRkRPc1JxVTVkanV3cnQ5eTNxUGlWZzkwclZVb01CMEdBMVVkRGdRV0JCUlVQSDgycW9yNUozdDZLYnNNWmhpY2RjTE5QREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBZ0VBcDZKQnJSK3l5ckdLTXNtajNOYkV2NWxJZUhhSVQrTGFPdUpHV2NrSXYzaytBb2F6OUprdi9wR0I2ZGltU21GaVI5MGF2UFRTWHlxZDdGbXRZZmFoNzR3ZzMwQnRGdWppY2JaQ0NDL2twdkJPczcrKysrc3ZURWpXWC9wK3pRUE9Ub0NjcTFGdWhDZVg4SzdIWTUvRVBadTR4alJpMVNOMUd4cm5FWjZxUmZvKzlncmdjYUpHcjltcVBDL2ZBWUNwYnhFNFZRODQ3djVJZUtuTk1udVNzY2MyYVhOSlJEZ3p5UVAweGRjWm1BbjVOcHhyd1ZTS2NQRHR1c2RxLzdmT3BmT2hIZ0JtdVdKMUgvWEhUUXF3VjRmdHM0ZENUNUFhcEdwOG55U0tneXV2a3BpZWFMTEI5UWFOemo0bE1EM2YrOFVUTmQ1WWVSdThkdWc0QmViNWw1WHdyV2dWbXpYYWZpWnVXNDNSaCsremFmRHQrRWFmaDFCR1dseWhJOStJWnp5WkdiTlBrcklVOVV2THNkcXNnU1FWTkhQWXJjMm1saUdvWXErc3pEUnhTY0ZFTk1nQ0Zwa2x3K0t1WXJac1VraitmS3JmRGp3bmgyT0hnazlUa2RNblJHUEg4MHBGTW92VXZPRHhaV3FaMjUxT2dpOStGY0ZUazErUGpsRG5qUEJUdHZ4ZWNoU3BNcU9SNFBvejVFVzJoTzZ1TG8zZjlQMzRodUF3NFpKc2RNWXVJSTRjMW00eWFOU3B4cXhyR3BvcGp4aXBqdWtvd3AxZFlzTWpSMnJ1d1lsdWxOMHd3WW11Nm5idU1QanAwWFVoelhQNCtOUW40bzlNV0wvSERRcGx6dTdtZFFFNnJmZlp0NTJQUEdxbFAzcHhoOTM2enBHSWRDNDhTNGs9PC9YNTA5Q2VydGlmaWNhdGU+PFg1MDlDZXJ0aWZpY2F0ZT5NSUlHSERDQ0JBU2dBd0lCQWdJSUo4WGc5UHp6Rlpvd0RRWUpLb1pJaHZjTkFRRU5CUUF3Z1lzeEN6QUpCZ05WQkFZVEFsTkZNVE13TVFZRFZRUUtEQ3BNdzZSdWMyYkR0bkp6dzZScmNtbHVaMkZ5SUVKaGJtc2dRV3QwYVdWaWIyeGhaeUFvY0hWaWJDa3hFekFSQmdOVkJBVVRDalV4TmpRd01UazROemd4TWpBd0JnTlZCQU1NS1V6RHBHNXpac08yY25QRHBHdHlhVzVuWVhJZ1FtRnVheUJEUVNCMk1TQm1iM0lnUW1GdWEwbEVNQjRYRFRFeU1ERXdNekE1TURRd04xb1hEVE0wTVRJd01UQTVNRFF3TjFvd2daVXhDekFKQmdOVkJBWVRBbE5GTVRNd01RWURWUVFLRENwTXc2UnVjMmJEdG5Kenc2UnJjbWx1WjJGeUlFSmhibXNnUVd0MGFXVmliMnhoWnlBb2NIVmliQ2t4RXpBUkJnTlZCQVVUQ2pVeE5qUXdNVGs0TnpneFBEQTZCZ05WQkFNTU0wekRwRzV6WnNPMmNuUERwR3R5YVc1bllYSWdRbUZ1YXlCRGRYTjBiMjFsY2lCRFFUTWdkakVnWm05eUlFSmhibXRKUkRDQ0FpSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBT2wxOG1Wak5RMVVTTk1OUzU1T0pIZkIvL2RHcnAxMlkvNXF4SDNBTHVHZkxJaEIvREdHSEVVVDkwQkdyRDA2UUx6S1lueEo1cVlOTlI4VHAveFg0emIrOEV1MEFXdWdEdWh6bzZoMUphSDdIVmJXRUdSQTdJbWJTSTQzSTRCNVhvSTQwZC9URDNIU21Ma25BT1BZK3Nrd2tRYmwwTUJwMERJQjdtZXNHT1V2M1B3Z3VMZmYzMzYvazgxZU1GbEZCV1dWRHU0UVhBTDBtRVhneFpsd0p5cWJYMk94c0RvQXBlbEZ6UW82UTBEQjdwNndKdmhkOHRsOW5rY3Zma1ZIc3E5K3VtRlJCRmFNUTdlV2hvL05NZHByNWVpM2d2ZGo3N2JOUnJxZDB1YURXOTZ6ek1teEl5eWJFb0hvV2ZmcW1zMWI5TFY0b3Zsa1pBeHhBdm5Lam0xNW5SMDViUUNFZzFGd3VNaFYveVFqSnA4WUFMZmFheFRobXY0Snd6Y1NJTExibHgxWXF3RnVsUmRvemFHbHlHbWdYZEdXbDlyLzRxYk5jelNMSnBuVHZKbk5SdDdxSGJhWExEc0ZjTmVnb3p4cnkrSkdNN3BJUTljRTR6cWlRSEJpYm1xSnZJMDNYKzJZMnZ6MWNOWERsanR3cHU5bk94UzEwdWNqQVFWNnlTaCtUN2VtUkFka05kbDU2Q2VEYzZkWkNJeEpIZjhSYzByaTJ1M2JNbHR3R3RMekY4S01TZDdHVkgxakt2YTBoaFFpaytXQlltcnZLbVFoUEl4a3RFNlUxSERnRDVOSnpBK2hNbHRVYjB4ZytVTGFYRkdkcktwQ2JmSDBUWHFXb1JKSnkvcCtEYTZTTHZmcytjcXdmV2lBN1A5akdxOUNjKzc1eFd2RU5hSTdBZ01CQUFHamVEQjJNQjBHQTFVZERnUVdCQlF6ckVhbE9YWTdzSzdmY3Q2ajRsWVBkSzFWS0RBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUI4R0ExVWRJd1FZTUJhQUZFaGdQQlVkK2NPbXk1NFo4OWlScEhQY3Y0TlJNQk1HQTFVZElBUU1NQW93Q0FZR0tvVndUZ0VGTUE0R0ExVWREd0VCL3dRRUF3SUJCakFOQmdrcWhraUc5dzBCQVEwRkFBT0NBZ0VBYmVEd2s4YzNGSW9LcUUvakRYQm1WVE1EaW5wTnBGSVJsMm94K3B3cm9QODdOVFFpUUwyc1ArZXk2bm9GSDNSZmFNbGcxU1dGNFlpMXpwVkxTT2pYcGx5UlVHR3paOENSc0VTbm9yTmVMV2NtS1BraVkrUGVGUXFpQzBKRUFlenJsV0d3aU9yODV4QUw4ajhzUldCeXZ2WHdtekI0MTBXcUkvVHN1ZkE5cXpVN1JobFdYOEdyaDZuUXpieERsWXEva1dwV3NseHpkaElWckRKNW1vTFI4bVRYaXErL2ZQd243L1czT2pyQnJKdytZUWIrVlgwS0dLKzFZc0ZKVHB1bUc3WkZqSGxjbDVIeXRQbTc5aGhScVkvcFBpdEUwaGkrTDczbDVSemR6R1M5UWZYeHhMYTZvUWVRSENGeGZvQU5WVnU5WldGK1lScmF5N2RnYmZoZjE0UDJuaFBSUTFZUjJyMmswUkhLNE1vZXp4d2l4cFN5SHAzMnhuRy8venIwdVNvK1BwejZhUnh4STZUc2RDZnVNRnA2cDhmNVFxL1l4N3NvYStOM3YrRFEyQys1TWNSaU1sU0lrS1pPUU1XaE5BU215Z0xXelEvRjRBSldDbEI1QlhaL3VTSjRyajh2SFB4Q0lKUmxkR1h0bUp4S3ZNR0pmaEIrR2hWOXhxM1V3YUdwNWdkUXZBUFdTQUFSL1RlQjlGc1hxS3FxSW8rMXlrTW4wODg4UitYeXNoN3paR0lBQUY1RkZzNlNGZ25kY2F1ZzBhbFh6WWJyQTROZGdFNlFMc285M2grZUhlYTRLTXFEVkVoeWlwbDFncytHbW5pRWVDOGlabXNBL2pvbkRyYyt4TkIwS3hvZWtSV1V0Ui9qL3hxNDd3Um5jdEwxQ09vclVYeFZkRVU9PC9YNTA5Q2VydGlmaWNhdGU+PFg1MDlDZXJ0aWZpY2F0ZT5NSUlGNlRDQ0E5R2dBd0lCQWdJSWZ3TFZFVFBmWVZRd0RRWUpLb1pJaHZjTkFRRU5CUUF3WXpFa01DSUdBMVVFQ2d3YlJtbHVZVzV6YVdWc2JDQkpSQzFVWld0dWFXc2dRa2xFSUVGQ01SOHdIUVlEVlFRTERCWkNZVzVyU1VRZ1RXVnRZbVZ5SUVKaGJtdHpJRU5CTVJvd0dBWURWUVFEREJGQ1lXNXJTVVFnVW05dmRDQkRRU0IyTVRBZUZ3MHhNakF4TURNd09ESXlNRFJhRncwek5ERXlNekV3T0RJeU1EUmFNSUdMTVFzd0NRWURWUVFHRXdKVFJURXpNREVHQTFVRUNnd3FUTU9rYm5ObXc3WnljOE9rYTNKcGJtZGhjaUJDWVc1cklFRnJkR2xsWW05c1lXY2dLSEIxWW13cE1STXdFUVlEVlFRRkV3bzFNVFkwTURFNU9EYzRNVEl3TUFZRFZRUUREQ2xNdzZSdWMyYkR0bkp6dzZScmNtbHVaMkZ5SUVKaGJtc2dRMEVnZGpFZ1ptOXlJRUpoYm10SlJEQ0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQUxmUHZrWFlObHRUeVR5dk92b2tHWHhFZFNzbnEvQ2JRc0YzR0Y2ZG1ZVm9FK1ZVSExjMkNmTHlzSmR0Umo5MUVienNIaGhhS2xlRWlXSGNzMjg4akFGOXdiK2pkU25jbzcxQkNUOFdWR3c4UldhR3ROWXFtS0g2RmZTck8zYmdxcDVCbVdkNWo3N2hwUzVPS05rR04yZXpiOTc3Q3VrTWxwNjg5V1dhK1c5VU9OckRKSjhWOWpKZk1Kc283bHBMRmNjTEwvVTdrd1ZYcmw0S1AyZGtYY29ZUThWQlkvQTk3RXdUK01JaXhtNlVpOVM4TVJvT0ZlYm1GcytzZDlIYi9iVDFxMlRqL2xncERIb3BmTmNlbzZQQVVUejZVK25sSnc5Qi9OdHl2ejhCQ0gvdDl6YjBiakJyQkxXdzZtLytnNG9rVCtJYWxPSkRUQ25lYnBOcWIyaEphd3lkVlFwYWYzSklrRGQ5bVFwbFpIQ252a1NmQks4aTBNMDZtVHB4OCtUdDhOaWpzcmZLMTI5WE95YmgyaFZMZ3F1MGIzWHhUbjBQa1NGOEtkd2tzZGtqKzlVZEZOb1puVXpWalkwM2UxZndMemVkS0NhMDFybStnNXF4RjAwVWtsdEV0MVRCRjZiVHVSQnNDVWhGQUREZ09Gd2MvWUpzckU2UWNCb3FpQW9iL1V4cE95NDRzNFFsZldxWlJsMHR6Y0w3dFBIUWVWWEI1NnF6dDRmVEZvbm9qeVFPZ3BJeWRlRUVscVZuM0xKK0hTeURzSVpNYStNUHovTFNxRXJCV0o1RHJHM1ZIbHIvT0l6NUs1RzVFZkZZak50Q2Niek84QWZoNUxOOVZPVlRGZFhJOEdjZkdscUgzVm9PVmpQM09pVWNyTDFTVC9aTTVvSzR5enZwQWdNQkFBR2plREIyTUIwR0ExVWREZ1FXQkJSSVlEd1ZIZm5EcHN1ZUdmUFlrYVJ6M0wrRFVUQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01COEdBMVVkSXdRWU1CYUFGR2VLdXJMcVNCeDY5VHRvTnlkeUJ1dVJZOHRUTUJNR0ExVWRJQVFNTUFvd0NBWUdLb1Z3VGdFQk1BNEdBMVVkRHdFQi93UUVBd0lCQmpBTkJna3Foa2lHOXcwQkFRMEZBQU9DQWdFQXVKNGZGd2pnRGJzTzBTMGxOdU5sNlFxYmlkdzY4YmpIeEZxOGlzcFVSZ0xaSDl1VjVlOFNuRVJ6dHVDT1JJV0wxeVBldndsclllZTI0ajdsYlVwMnY2VWZnclljL2NKc2lNTnJoZmRaZGRCMFljTHRlajdIYUd4Y2VpMmpmRW5ITU5weFZHS1JlN3ZnTVVMYXUxLzZqdWQrSUVSOUtUcjU3NDBTMVJaMzJFLzJFbVY2OUFkeTFLdk1zbWxERkZnd0ZNaUFkUnloRXpXaThqbVRqM2ZxKzd3UFlFLzl0NUV2MjFzcEszM1BlU3pHR3dLenlMa3BEbHRCWk1SUlVNL2tRMHc5VXB4UE0wSnRvem5XcTBlTmpoVE1FazE0QmFlQWUwcElUNFpudzJreUlyRUNYS2lhT1NaT2VoZG8zZmVVS3JQZERIbDI0WEhvTWVYakNBdHgrRExXdmhkYWlnd0VRendjYWhZd1JHazFiUHBvMUMwWEk4c1QwUnFzaE15S3ZPRjg2VVp0N25Sam0vSlAwbnp0dk5NLzR3YzJXeE5ZTGVIaUVjaEtmaVp1QWZuaENtTGJTeTdLNFpUNDg4RlExbWU4aW9hMUR5bXFlaGtwbFIzMlE5ZnJSWUpKOTZpblBTNUlOT1N5U0VQWG1vS1lycUs3N1E5cFVLb3lLSE5CaE4yRkl6Rkl6UWVPckJyTElsUURCYjlQM0hKYSs3YTFrS3VFdmhZRitTQ1Q2eTE1VnlMZEp6aGU1ZERRSWZyZG5oVm5mdmw2TnFhb0Y1TlRUWmNpN3p1SWhCZks1QjRZVkl2NEVlZWlhTkgvSGhla1RRUnNxV01hTjJ5QUErdTZrbU1waitXV3BTSWVjK1hKY0JEcFdObGFzRGZWL1dIc1RWOTJJLzRWVFlZPTwvWDUwOUNlcnRpZmljYXRlPjwvWDUwOURhdGE+PC9LZXlJbmZvPjxPYmplY3Q+PGJhbmtJZFNpZ25lZERhdGEgeG1sbnM9Imh0dHA6Ly93d3cuYmFua2lkLmNvbS9zaWduYXR1cmUvdjEuMC4wL3R5cGVzIiBJZD0iYmlkU2lnbmVkRGF0YSI+PHNydkluZm8+PG5hbWU+WTI0OVJXUnpkSExEdG0wZ1JuSnZhRzBnUVVJZ1UzQmxZMnh2TEc1aGJXVTlVMUJGUTB4UExITmxjbWxoYkU1MWJXSmxjajAxTlRreE1ERTNOelV3TEc4OVRtOXlaR1ZoSUVKaGJtc2dRVUlnS0hCMVltd3BMR005VTBVPTwvbmFtZT48bm9uY2U+bi9jTXNaT2taenp1M2YxYURkajltR2F1NEdrPTwvbm9uY2U+PGRpc3BsYXlOYW1lPlUxQkZRMHhQPC9kaXNwbGF5TmFtZT48L3NydkluZm8+PGNsaWVudEluZm8+PGZ1bmNJZD5JZGVudGlmaWNhdGlvbjwvZnVuY0lkPjx2ZXJzaW9uPk55NHhOQzR3PC92ZXJzaW9uPjxlbnY+PGFpPjx0eXBlPlFVNUVVazlKUkE9PTwvdHlwZT48ZGV2aWNlSW5mbz5OeTR3PC9kZXZpY2VJbmZvPjx1aGk+ZGdHK3pvMFBkc1NFd1cwdTliNm9PeVc4cWE4PTwvdWhpPjxmc2liPjA8L2ZzaWI+PHV0Yj5jczE8L3V0Yj48cmVxdWlyZW1lbnQ+PGNvbmRpdGlvbj48dHlwZT5DZXJ0aWZpY2F0ZVBvbGljaWVzPC90eXBlPjx2YWx1ZT4xLjIuNzUyLjc4LjEuNTwvdmFsdWU+PC9jb25kaXRpb24+PC9yZXF1aXJlbWVudD48dWF1dGg+cHc8L3VhdXRoPjwvYWk+PC9lbnY+PC9jbGllbnRJbmZvPjwvYmFua0lkU2lnbmVkRGF0YT48L09iamVjdD48L1NpZ25hdHVyZT4=',
//     ocspResponse: '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'
// }

type BaseState = {
  status: 'NotInitializedState' | 'PendingState' | 'ErrorState' | 'FailedState' | 'CompleteState'
}

export interface BankidResponse {
  status?: 'pending' | 'failed' | 'complete'
  hintCode?: FailedHintCode | PendingHintCode
  errorCode?: ErrorCode
  completionData?: any
}

export type NotInitializedState = {
  kind: "NotInitializedState"
  isMobile: boolean
} & BaseState

export type ErrorCode =  'alreadyInProgress' | 'invalidParameters' | 'unknown' | 'unauthorized' | 'notFound' | 'requestTimeout' | 'unsupportedMediaType' | 'internalError' | 'Maintenance'

export type ErrorState = {
  kind: "ErrorState"
  errorCode: ErrorCode
} & BaseState

export type PendingHintCode = 'outstandingTransaction' | 'noClient' | 'started' | 'userSign' | 'unknown'

export type PendingState = {
  kind: "PendingState"
  hintCode: PendingHintCode
} & BaseState

export type FailedHintCode = 'expiredTransaction' | 'certificateErr' | 'userCancel' | 'cancelled' | 'startFailed' | 'unknown'

export type FailedState = {
  kind: "FailedState"
  hintCode: FailedHintCode
} & BaseState

export type CompleteState = {
  kind: "CompleteState"
  completionData: any
} & BaseState


export type CurrentState = NotInitializedState | PendingState | ErrorState | FailedState | CompleteState
